 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
const request = require('request')
    // , os = require('os')
    , assert = require('assert')
    // , crypto = require("crypto")
    // , url = require("url")
    , urlExists = require("url-exists")
    // , validUrl = require('valid-url')
    , mongo = require('mongodb').MongoClient;
// Standard URI format: mongodb://[dbuser:dbpassword@]host:port/dbname, details set in .env
// const MONGODB_URI = 'mongodb://'+process.env.USER+':'+process.env.PASS+'@ds2'+process.env.DB_PORT+'.mlab.com:'+process.env.DB_PORT+'/'+process.env.DB;
const MONGODB_URI = process.env.MONGODB_URI; 
var collection;

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });


app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    });

app.route('/list')
    .get(function(req, res) {
      mongo.connect(MONGODB_URI, function(err, client) {
        assert.equal(err, null);
        // if(err) throw err;
        const db = client.db('matdb');
        collection = db.collection('urlshort');
        var list = [];
        var cursor = collection.find();
        cursor.forEach(
          function(obj) {
            list.push(obj);
          },
          function(err) {
            assert.equal(err, null);
            console.log('End of cursor. Sending list array...');
            res.send(list);
            // db.close();
          }
        );
      });
    })

app.route('/play')    // Use this route to test something
    .get(function(req, res) {
      var myurl = req.query.url;
      console.log('url: ', myurl);
      
      /*var parsedURL = url.parse(myurl);  // using 'url'
      console.log(parsedURL.hostname);
      if (parsedURL.hostname) {
        console.log('Good');
        res.send('Ok Good');
      }
      if (!parsedURL.hostname) {
        console.log('Bad');
        res.send('Ok Bad');
      }
      
      if (validUrl.isUri(myurl)) {    // using 'valid-url'
        console.log('Good');
        res.send('Ok Good');
      } else {
        console.log('Bad');
        res.send('Ok Bad');
      }
      */
      urlExists(myurl, function(err, exists) {
        if (exists) {
          console.log('Good');
          res.send('Ok Good');
        } else {
          console.log('Bad');
          res.send('Ok Bad');
        }
      });
      
    });

function handleNew(oURL, res) {
  console.log('Input url: ', oURL);
  var sObj = {};
  urlExists(oURL, function(err, exists) { // Checking if the URL is live
    if (exists) {
      mongo.connect(MONGODB_URI, function(err, client) {
        assert.equal(err, null);
        const db = client.db('matdb');
        collection = db.collection('urlshort');
        // Check if the url was already shortened
        collection
          .find({original_url: oURL})
          .project({"_id": 0})
          .toArray(function (err, array) {
            if (array.length > 0) {
              var mydoc = array[0];
              console.log('existing doc: ', mydoc);
              res.write('URL was already shortened\n');
              res.write(JSON.stringify(mydoc));
              res.end();
            } else {
              var sURL = Math.random().toString(36).substr(2,5);
              var obj = {original_url: oURL, short_url: sURL};
              console.log('Inserting...', obj);
              try {
                collection.insertOne(obj);
              } catch (e) {
                assert.equal(e, null);
              };
              sObj.original_url = oURL
              sObj.short_url = 'https://mat-shorturl.glitch.me/' + sURL;
              console.log('SEnding...', sObj);
              res.send(JSON.stringify(sObj));
            }
          });
        // collection.findOne({original_url: oURL}, {_id: 0}, function(err, mydoc){
      });
    } else {
      console.log('Invalid url');
      sObj.error = 'Incorrect url. Make sure the url is formatted correctly and it is a real site'
      res.send(JSON.stringify(sObj));
    }
  });
}

// Re-direct the default route to our application logic
app.use(function(req, res, next){
  if (req.path.substr(0,4) === '/new') {
    handleNew(req.path.substr(5), res);
  } else {
    var shortURL = req.path.substr(1,5);
    console.log('shortURL: ', shortURL);
    mongo.connect(MONGODB_URI, function(err, client) {
      if (err) { console.log('errord'); }
      assert.equal(err, null);
      const db = client.db('matdb');
      collection = db.collection('urlshort');
      // var mydoc = collection.findOne({short_url: shortURL});
      collection.findOne({short_url: shortURL}, function(err, mydoc){
        if (err) { console.log('DB errord'); }
        assert.equal(err, null);
        console.log('mydoc: ', mydoc);
        if (mydoc) {
          console.log('Going to re-direct to..', mydoc.original_url);
          return res.redirect(mydoc.original_url);
        } else {
          console.log('URL not in DB');
          var sObj = {};
          sObj.error = 'Incorrect usage of the API (or) short URL not in Database';
          res.send(JSON.stringify(sObj));
        }
      });
    });    
  }
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

